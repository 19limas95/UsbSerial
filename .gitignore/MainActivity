package com.example.kasso_000.wifix;


import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.IBinder;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.util.Set;


public class MainActivity extends Activity {
    private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {

        @Override

        public void onReceive(Context context, Intent intent) {

            switch (intent.getAction()) {

                case UsbService.ACTION_USB_PERMISSION_GRANTED: // USB PERMISSION GRANTED

                    Toast.makeText(context, "USB Ready", Toast.LENGTH_SHORT).show();

                    break;

                case UsbService.ACTION_USB_PERMISSION_NOT_GRANTED: // USB PERMISSION NOT GRANTED

                    Toast.makeText(context, "USB Permission not granted", Toast.LENGTH_SHORT).show();

                    break;

                case UsbService.ACTION_NO_USB: // NO USB CONNECTED

                    Toast.makeText(context, "No USB connected", Toast.LENGTH_SHORT).show();

                    break;

                case UsbService.ACTION_USB_DISCONNECTED: // USB DISCONNECTED

                    Toast.makeText(context, "USB disconnected", Toast.LENGTH_SHORT).show();

                    break;

                case UsbService.ACTION_USB_NOT_SUPPORTED: // USB NOT SUPPORTED

                    Toast.makeText(context, "USB device not supported", Toast.LENGTH_SHORT).show();

                    break;

            }

        }

    };

    private UsbService usbService;

    public TextView display;

    private EditText editText;

    private MyHandler mHandler;

    private final ServiceConnection usbConnection = new ServiceConnection() {


        @Override

        public void onServiceConnected(ComponentName arg0, IBinder arg1) {

            usbService = ((UsbService.UsbBinder) arg1).getService();

            usbService.setHandler(mHandler);

        }


        @Override

        public void onServiceDisconnected(ComponentName arg0) {

            usbService = null;

        }
    };

    Button enableButton,disableButton;

    TextView text;

    @Override

    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);



        enableButton=(Button)findViewById(R.id.button1);

        disableButton=(Button)findViewById(R.id.button2);

        text = (TextView)findViewById(R.id.wifi_info);





        enableButton.setOnClickListener(new OnClickListener() {

                                            public void onClick(View v) {

                                                WifiManager wifi = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);


                                                wifi.setWifiEnabled(true);

                                                //wifi.getConnectionInfo();

                                                text.setText("" + wifi.getConnectionInfo());
                                            }
                                        });
                mHandler = new MyHandler(this);


                display = (TextView) findViewById(R.id.textView1);

                editText = (EditText) findViewById(R.id.editText1);

                Button sendButton = (Button) findViewById(R.id.buttonSend);

                sendButton.setOnClickListener(new View.OnClickListener() {

                    @Override

                    public void onClick(View v) {

                        if (!editText.getText().toString().equals("")) {

                            String data = editText.getText().toString();

                            if (usbService != null) { // if UsbService was correctly binded, Send data

                                usbService.write(data.getBytes());

                            }
                        }

                    }
                });

                disableButton.setOnClickListener(new OnClickListener() {

                    public void onClick(View v) {

                        WifiManager wifi = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);

                        wifi.setWifiEnabled(false);

                        text.setText("");

                    }


                });
            }

        @Override

        public void onResume() {

            super.onResume();

            setFilters();  // Start listening notifications from UsbService

            startService(UsbService.class, usbConnection, null); // Start UsbService(if it was not started before) and Bind it

        }



        @Override

        public void onPause() {

            super.onPause();

            unregisterReceiver(mUsbReceiver);

            unbindService(usbConnection);

        }


        private void startService(Class<?> service, ServiceConnection serviceConnection, Bundle extras) {

            if (!UsbService.SERVICE_CONNECTED) {

                Intent startService = new Intent(this, service);

                if (extras != null && !extras.isEmpty()) {

                    Set<String> keys = extras.keySet();

                    for (String key : keys) {

                        String extra = extras.getString(key);

                        startService.putExtra(key, extra);

                    }

                }

                startService(startService);

            }

            Intent bindingIntent = new Intent(this, service);

            bindService(bindingIntent, serviceConnection, Context.BIND_AUTO_CREATE);

        }



        private void setFilters() {

            IntentFilter filter = new IntentFilter();

            filter.addAction(UsbService.ACTION_USB_PERMISSION_GRANTED);

            filter.addAction(UsbService.ACTION_NO_USB);

            filter.addAction(UsbService.ACTION_USB_DISCONNECTED);

            filter.addAction(UsbService.ACTION_USB_NOT_SUPPORTED);

            filter.addAction(UsbService.ACTION_USB_PERMISSION_NOT_GRANTED);

            registerReceiver(mUsbReceiver, filter);

        }



        /*

         * This handler will be passed to UsbService. Data received from serial port is displayed through this handler

         */

        }
